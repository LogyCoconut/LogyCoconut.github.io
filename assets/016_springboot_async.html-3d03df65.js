const e=JSON.parse('{"key":"v-495e87bd","path":"/post/016_springboot_async.html","title":"SpringBoot中定时任务的异步执行","lang":"zh-CN","frontmatter":{"title":"SpringBoot中定时任务的异步执行","date":"2020-08-18T14:25:31.000Z","draft":false,"category":["关于技术"],"tag":["SpringBoot","Async"],"description":"Spring的定时任务默认是单线程串行执行的, 那假设第一个任务比较耗时长, 直到超过任务二的设定时间之后才完成, 那么就会造成任务二不能及时完成, 进而造成其他问题 先来说说定时任务 开启对定时任务的支持, 在启动类上加上@EnableScheduling // 启动类 @EnableScheduling @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } } // 定时任务类 @Slf4j @Service public class ScheduledService { @Scheduled(fixedRate = 5000) public void scheduled1() { log.info(\\"----{}----\\", Thread.currentThread().getName()); } @Scheduled(cron = \\"0/5 * * * * *\\") public void scheduled2() { log.info(\\"----{}----\\", Thread.currentThread().getName()); } }","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/post/016_springboot_async.html"}],["meta",{"property":"og:title","content":"SpringBoot中定时任务的异步执行"}],["meta",{"property":"og:description","content":"Spring的定时任务默认是单线程串行执行的, 那假设第一个任务比较耗时长, 直到超过任务二的设定时间之后才完成, 那么就会造成任务二不能及时完成, 进而造成其他问题 先来说说定时任务 开启对定时任务的支持, 在启动类上加上@EnableScheduling // 启动类 @EnableScheduling @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } } // 定时任务类 @Slf4j @Service public class ScheduledService { @Scheduled(fixedRate = 5000) public void scheduled1() { log.info(\\"----{}----\\", Thread.currentThread().getName()); } @Scheduled(cron = \\"0/5 * * * * *\\") public void scheduled2() { log.info(\\"----{}----\\", Thread.currentThread().getName()); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-02T15:36:16.000Z"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"Async"}],["meta",{"property":"article:published_time","content":"2020-08-18T14:25:31.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-02T15:36:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot中定时任务的异步执行\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-18T14:25:31.000Z\\",\\"dateModified\\":\\"2022-12-02T15:36:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"先来说说定时任务","slug":"先来说说定时任务","link":"#先来说说定时任务","children":[]},{"level":2,"title":"开启异步支持","slug":"开启异步支持","link":"#开启异步支持","children":[]}],"git":{"createdTime":1669995376000,"updatedTime":1669995376000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":1}]},"readingTime":{"minutes":1.22,"words":365},"filePathRelative":"_post/016_springboot_async.md","localizedDate":"2020年8月18日","excerpt":"<blockquote>\\n<p>Spring的定时任务默认是单线程串行执行的, 那假设第一个任务比较耗时长, 直到超过任务二的设定时间之后才完成, 那么就会造成任务二不能及时完成, 进而造成其他问题</p>\\n</blockquote>\\n<h2> 先来说说定时任务</h2>\\n<p>开启对定时任务的支持, 在启动类上加上<code>@EnableScheduling</code></p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>// 启动类\\n@EnableScheduling\\n@SpringBootApplication\\npublic class DemoApplication {\\n    public static void main(String[] args) {\\n        SpringApplication.run(DemoApplication.class, args);\\n    }\\n}\\n\\n// 定时任务类\\n@Slf4j\\n@Service\\npublic class ScheduledService {\\n    @Scheduled(fixedRate = 5000)\\n    public void scheduled1() {\\n        log.info(\\"----{}----\\", Thread.currentThread().getName());\\n    }\\n\\n    @Scheduled(cron = \\"0/5 * * * * *\\")\\n    public void scheduled2() {\\n        log.info(\\"----{}----\\", Thread.currentThread().getName());\\n    }\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
