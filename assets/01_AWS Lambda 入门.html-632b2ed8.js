import{_ as i,Y as d,Z as o,$ as a,a0 as e,a1 as t,a2 as s,I as r}from"./framework-beff9ad1.js";const l={},c=s('<h2 id="什么是-aws-lambda" tabindex="-1"><a class="header-anchor" href="#什么是-aws-lambda" aria-hidden="true">#</a> 什么是 AWS Lambda</h2><h3 id="计算服务的演进" tabindex="-1"><a class="header-anchor" href="#计算服务的演进" aria-hidden="true">#</a> 计算服务的演进</h3><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230624223939.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><strong>基础云架构 -&gt; 容器技术兴起 -&gt; Serverless 无服务器架构</strong></p><h3 id="aws-lambda-应运而生" tabindex="-1"><a class="header-anchor" href="#aws-lambda-应运而生" aria-hidden="true">#</a> AWS Lambda 应运而生</h3><blockquote><p>Serverless 的概念最早提出于 2008 年 (Google APP Engine) 但直到 2014 年 Amazon 推出 AWS Lambda 才开始被关注</p></blockquote><p>Serverless, 字面意思是 &quot;无服务器&quot;</p><p>本质上 Serverless 依然属于云服务的范畴, 但是 Serverless 直接将传统云服务的 &quot;租算力&quot; 变成了 &quot;租服务&quot;</p><h4 id="aws-lambda-vs-aws-ec-2" tabindex="-1"><a class="header-anchor" href="#aws-lambda-vs-aws-ec-2" aria-hidden="true">#</a> AWS Lambda VS AWS EC 2</h4><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619015052.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="lambda-优势" tabindex="-1"><a class="header-anchor" href="#lambda-优势" aria-hidden="true">#</a> Lambda 优势</h4><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230620014235.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><ul><li><p>无需维护 (特指物理机器的维护) 只关心你的代码, 不需要考虑服务器</p></li><li><p>天然高可用, 自动伸缩 得益于 AWS 的高可用架构, Lambda 在监测到流量变大之后, 会自动扩展 并且这一切都在处在账户的并发限制中, 不会无限制的扩张, 导致成本上升</p></li><li><p>按照调用付费, 降低成本, 不需要为闲置付费</p></li><li><p><strong>用自定义逻辑扩展其他 AWS 服务</strong></p></li></ul><h4 id="lambda-使用场景" tabindex="-1"><a class="header-anchor" href="#lambda-使用场景" aria-hidden="true">#</a> Lambda 使用场景</h4><table><thead><tr><th>AWS 组件</th><th>参考场景</th></tr></thead><tbody><tr><td>S 3</td><td>图片压缩、视频转码、内容审查</td></tr><tr><td>SQS</td><td>消息推送</td></tr><tr><td>DynamoDB</td><td>数据校验、筛选</td></tr><tr><td>API Gateway</td><td>微服务接口提供</td></tr><tr><td>...</td><td>...</td></tr></tbody></table><p>AWS Lambda 在 AWS 整个版图中占非常重要的位置</p><p>通过 Lambda 服务, 用户可以将 AWS 中的很多服务串在起来, 相互来调用</p><p><em>Lambda 提供了 17 个官方应用的触发器以及几十个三方的触发器 (通过 Event Bridge 触发)</em></p>',18),u={id:"lambda-的收费标准",tabindex:"-1"},p=a("a",{class:"header-anchor",href:"#lambda-的收费标准","aria-hidden":"true"},"#",-1),h={href:"https://aws.amazon.com/cn/lambda/pricing/",target:"_blank",rel:"noopener noreferrer"},m=s(`<blockquote><p>使用 Lambda 的又一个很重要的理由</p></blockquote><p>Lambda 的调用十分便宜, 收费主要取决于两个因素</p><ul><li>为函数分配的内存量 (介于 128 MB - 10240 MB 之间)</li><li>函数的执行时间 (介于 1 s - 15 min 之间)</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619012957.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="lambda-编程模型、并发控制" tabindex="-1"><a class="header-anchor" href="#lambda-编程模型、并发控制" aria-hidden="true">#</a> Lambda 编程模型、并发控制</h2><h3 id="编程模型" tabindex="-1"><a class="header-anchor" href="#编程模型" aria-hidden="true">#</a> 编程模型</h3><p><em>以 Java 语言为例</em><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619021142.png" alt="image.png" loading="lazy"></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.amazonaws<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aws-lambda-java-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),g={id:"并发控制",tabindex:"-1"},b=a("a",{class:"header-anchor",href:"#并发控制","aria-hidden":"true"},"#",-1),v={href:"https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/lambda-concurrency.html",target:"_blank",rel:"noopener noreferrer"},f=a("p",null,[a("strong",null,"并发"),e("是 AWS Lambda 函数同时处理的正在进行的请求数")],-1),_={href:"http://aws.amazon.com/premiumsupport/knowledge-center/lambda-concurrency-limit-increase/",target:"_blank",rel:"noopener noreferrer"},q=s(`<h4 id="预留并发" tabindex="-1"><a class="header-anchor" href="#预留并发" aria-hidden="true">#</a> 预留并发</h4><p>预留并发保证了函数的最大并发实例数。当一个函数有预留并发时，任何其他函数都不可以使用该并发</p><h4 id="预置并发" tabindex="-1"><a class="header-anchor" href="#预置并发" aria-hidden="true">#</a> 预置并发</h4><p>预配置并发可初始化请求数量的执行环境，使其准备好立即响应函数的调用。该配置会让账户<strong>产生费用</strong></p><h4 id="突增并发" tabindex="-1"><a class="header-anchor" href="#突增并发" aria-hidden="true">#</a> 突增并发</h4><p>对于最初的流量突增，在一个区域中的累积并发数量可以达到 1000 (不同区域数量不同) 的初始级别</p><p>在初始突增之后，函数的并发可按每分钟增加 500 个实例的速度扩展。这将一直持续到有足够的实例来服务所有请求，或者直到达到并发限制。当请求进入的速度超过函数可扩展的速度，或者当函数处于最大并发时，其他请求会因限制错误而失败。</p><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/aws/lambda/20230619023009.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><em>请求减少，并且在空闲一段时间后，函数的未使用实例会停止。未使用的实例在等待请求时会被冻结，<strong>且不会产生任何费用</strong></em></p><h2 id="使用展示" tabindex="-1"><a class="header-anchor" href="#使用展示" aria-hidden="true">#</a> 使用展示</h2><h3 id="简单-string-处理" tabindex="-1"><a class="header-anchor" href="#简单-string-处理" aria-hidden="true">#</a> 简单 String 处理</h3><h3 id="使用-amazon-s-3-触发器创建缩略图" tabindex="-1"><a class="header-anchor" href="#使用-amazon-s-3-触发器创建缩略图" aria-hidden="true">#</a> 使用 Amazon S 3 触发器创建缩略图</h3><ul><li>创建定义 Lambda 函数权限的 IAM Policy, 该函数必须具有以下权限 <ul><li>从指定 S 3 桶获取对象</li><li>将对象写入到指定 S 3 桶</li><li>将日志写入 Amazon CloudWatch Logs</li></ul></li></ul><p><em>具体策略 Json 如下:</em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
        {
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: [
                &quot;logs:PutLogEvents&quot;,
                &quot;logs:CreateLogGroup&quot;,
                &quot;logs:CreateLogStream&quot;
            ],
            &quot;Resource&quot;: &quot;arn:aws:logs:*:*:*&quot;
        },
        {
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: [
                &quot;s3:GetObject&quot;
            ],
            &quot;Resource&quot;: &quot;arn:aws:s3:::demo-lambda-practise/*&quot;
        },
        {
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: [
                &quot;s3:PutObject&quot;
            ],
            &quot;Resource&quot;: &quot;arn:aws:s3:::demo-lambda-practise-resized/*&quot;
        }
    ]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过-api-gateway-进行参数传递" tabindex="-1"><a class="header-anchor" href="#通过-api-gateway-进行参数传递" aria-hidden="true">#</a> 通过 API Gateway 进行参数传递</h3><p>模拟页面 crud 操作</p>`,17),k={href:"https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/configuration-envvars.html",target:"_blank",rel:"noopener noreferrer"},x=a("h2",{id:"参考链接",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),e(" 参考链接")],-1),w={href:"https://docs.aws.amazon.com/zh_cn/lambda/latest/dg/welcome.html",target:"_blank",rel:"noopener noreferrer"};function S(A,L){const n=r("ExternalLinkIcon");return d(),o("div",null,[c,a("h4",u,[p,e(),a("a",h,[e("Lambda 的收费标准"),t(n)])]),m,a("h3",g,[b,e(),a("a",v,[e("并发控制"),t(n)])]),f,a("p",null,[e("对于每个并发请求，Lambda 会预置单独的执行环境实例。当函数收到更多请求时，Lambda 会自动处理执行环境数量的扩展，直到达到账户的并发限制 (默认为单区域 1000), 并且也可以 "),a("a",_,[e("申请增加限额"),t(n)]),e("，或者为关键函数增加单独并发控制")]),q,a("p",null,[e("_ "),a("a",k,[e("环境变量"),t(n)]),e(" _")]),x,a("p",null,[a("a",w,[e("AWS Lambda 官方文档"),t(n)])])])}const z=i(l,[["render",S],["__file","01_AWS Lambda 入门.html.vue"]]);export{z as default};
