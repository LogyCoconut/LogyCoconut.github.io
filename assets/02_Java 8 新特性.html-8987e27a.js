import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as e,c as p,a,b as t,d as r,f as l}from"./app-f8f38c45.js";const c={},k=l(`<h3 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> <strong>Lambda 表达式</strong></h3><p>也可称为闭包、Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 语法格式</span>
<span class="token punctuation">(</span> param <span class="token punctuation">)</span> <span class="token operator">-&gt;</span> expression 或 <span class="token punctuation">(</span> param <span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> statements<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用" aria-hidden="true">#</a> <strong>方法引用</strong></h3><p>方法引用提供了非常有用的语法，可以直接引用已有 Java 类或对象（实例）的方法或构造器。与 Lambda 联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码</p><ul><li><p><strong>默认方法</strong> − 默认方法就是一个在接口里面有了一个实现的方法</p></li><li><p><strong>Stream API</strong> −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 集合元素通过管道的方式处理并得到最终结果</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>       <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span> stream of elements <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token operator">|</span>filter<span class="token operator">+</span><span class="token operator">-&gt;</span> <span class="token operator">|</span>sorted<span class="token operator">+</span><span class="token operator">-&gt;</span> <span class="token operator">|</span>map<span class="token operator">+</span><span class="token operator">-&gt;</span> <span class="token operator">|</span>collect<span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>       <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="date-time-api" tabindex="-1"><a class="header-anchor" href="#date-time-api" aria-hidden="true">#</a> <strong>Date Time API</strong></h3><p>加强对日期与时间的处理</p><h3 id="optional-类" tabindex="-1"><a class="header-anchor" href="#optional-类" aria-hidden="true">#</a> <strong>Optional 类</strong></h3><p>Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,11),i={href:"https://www.runoob.com/java/java8-new-features.html",target:"_blank",rel:"noopener noreferrer"};function d(u,m){const s=o("ExternalLinkIcon");return e(),p("div",null,[k,a("p",null,[a("a",i,[t("菜鸟教程 - Java8新特性"),r(s)])])])}const g=n(c,[["render",d],["__file","02_Java 8 新特性.html.vue"]]);export{g as default};
