const n=JSON.parse('{"key":"v-7342f50d","path":"/Resource/code/01_java/04_%E5%B9%B6%E5%8F%91/02_%E5%8F%8C%E9%87%8D%E6%A0%A1%E9%AA%8C%E9%94%81%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%8D%95%E4%BE%8B.html","title":"双重校验锁实现对象单例","lang":"zh-CN","frontmatter":{"title":"双重校验锁实现对象单例","date":"2022-03-08T00:00:00.000Z","tag":["Java"],"description":"public class Singleton { private volatile static Singleton instance; private Singleton() {} public static Singleton getUniqueInstance() { if (instance == null) { // 类对象加锁 synchronized(Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } }","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/Resource/code/01_java/04_%E5%B9%B6%E5%8F%91/02_%E5%8F%8C%E9%87%8D%E6%A0%A1%E9%AA%8C%E9%94%81%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%8D%95%E4%BE%8B.html"}],["meta",{"property":"og:title","content":"双重校验锁实现对象单例"}],["meta",{"property":"og:description","content":"public class Singleton { private volatile static Singleton instance; private Singleton() {} public static Singleton getUniqueInstance() { if (instance == null) { // 类对象加锁 synchronized(Singleton.class) { if (instance == null) { instance = new Singleton(); } } } return instance; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-10T10:26:50.000Z"}],["meta",{"property":"article:author","content":"logycoconut"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-03-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-10T10:26:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"双重校验锁实现对象单例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-10T10:26:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://github.com/logycoconut\\"}]}"]]},"headers":[],"git":{"createdTime":1702204010000,"updatedTime":1702204010000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":1}]},"readingTime":{"minutes":0.65,"words":194},"filePathRelative":"Resource/code/01_java/04_并发/02_双重校验锁实现对象单例.md","localizedDate":"2022年3月8日","excerpt":"<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Singleton</span> <span class=\\"token punctuation\\">{</span>\\n    \\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">volatile</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Singleton</span> instance<span class=\\"token punctuation\\">;</span>\\n    \\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Singleton</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Singleton</span> <span class=\\"token function\\">getUniqueInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>instance <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 类对象加锁</span>\\n            <span class=\\"token keyword\\">synchronized</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Singleton</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>instance <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    instance <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Singleton</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> instance<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
