const e=JSON.parse('{"key":"v-71bb6719","path":"/01_Project/Redis/Redis%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98%20-%20%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/06_%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%EF%BC%9A%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4.html","title":"06_数据同步：主从库如何实现数据一致","lang":"zh-CN","frontmatter":{"title":"06_数据同步：主从库如何实现数据一致","tag":["Redis"],"category":["Redis 核心技术与实战"],"description":"如果 Redis 发生了宕机，AOF 和 RDB 可以分别通过回放日志和重新读入 RDB 文件的方式恢复数据，从而保证尽量少丢失数据，提升可靠性 不过，即使用了这两种方法，也依然存在服务不可用的问题 比如说，我们在实际使用时只运行了一个 Redis 实例，那么，如果这个实例宕机了，它在恢复期间，是无法服务新来的数据存取请求的 那我们总说的 Redis 具有高可靠性，又是什么意思呢？ 其实，这有两层含义 数据尽量少丢失 服务尽量少中断 AOF 和 RDB 保证了前者，而对于后者，Redis 的做法就是增加副本冗余量，将一份数据同时保存在多个实例上。即使有一个实例出现了故障，需要经过一段时间才能恢复，其他实例也可以对外提供服务，不会影响业务使用","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/01_Project/Redis/Redis%20%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98%20-%20%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/06_%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%EF%BC%9A%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4.html"}],["meta",{"property":"og:title","content":"06_数据同步：主从库如何实现数据一致"}],["meta",{"property":"og:description","content":"如果 Redis 发生了宕机，AOF 和 RDB 可以分别通过回放日志和重新读入 RDB 文件的方式恢复数据，从而保证尽量少丢失数据，提升可靠性 不过，即使用了这两种方法，也依然存在服务不可用的问题 比如说，我们在实际使用时只运行了一个 Redis 实例，那么，如果这个实例宕机了，它在恢复期间，是无法服务新来的数据存取请求的 那我们总说的 Redis 具有高可靠性，又是什么意思呢？ 其实，这有两层含义 数据尽量少丢失 服务尽量少中断 AOF 和 RDB 保证了前者，而对于后者，Redis 的做法就是增加副本冗余量，将一份数据同时保存在多个实例上。即使有一个实例出现了故障，需要经过一段时间才能恢复，其他实例也可以对外提供服务，不会影响业务使用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-29T15:10:21.000Z"}],["meta",{"property":"article:author","content":"logycoconut"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:modified_time","content":"2024-02-29T15:10:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06_数据同步：主从库如何实现数据一致\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-29T15:10:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://github.com/logycoconut\\"}]}"]]},"headers":[{"level":3,"title":"主从库间如何进行第一次同步？","slug":"主从库间如何进行第一次同步","link":"#主从库间如何进行第一次同步","children":[]},{"level":3,"title":"主从级联模式分担全量复制时的主库压力","slug":"主从级联模式分担全量复制时的主库压力","link":"#主从级联模式分担全量复制时的主库压力","children":[]},{"level":3,"title":"主从库间网络断了怎么办？","slug":"主从库间网络断了怎么办","link":"#主从库间网络断了怎么办","children":[]}],"git":{"createdTime":1709184530000,"updatedTime":1709219421000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":2}]},"readingTime":{"minutes":10.86,"words":3259},"filePathRelative":"01_Project/Redis/Redis 核心技术与实战 - 极客时间/06_数据同步：主从库如何实现数据一致.md","localizedDate":"2024年2月29日","excerpt":"<p>如果 Redis 发生了宕机，AOF 和 RDB 可以分别通过回放日志和重新读入 RDB 文件的方式恢复数据，从而保证尽量少丢失数据，提升可靠性</p>\\n<p>不过，即使用了这两种方法，也依然存在服务不可用的问题<br>\\n比如说，我们在实际使用时只运行了一个 Redis 实例，那么，如果这个实例宕机了，它在恢复期间，是无法服务新来的数据存取请求的</p>\\n<p>那我们总说的 Redis 具有高可靠性，又是什么意思呢？<br>\\n其实，这有两层含义</p>\\n<ul>\\n<li>数据尽量少丢失</li>\\n<li>服务尽量少中断</li>\\n</ul>\\n<p>AOF 和 RDB 保证了前者，而对于后者，Redis 的做法就是<strong>增加副本冗余量</strong>，将一份数据同时保存在多个实例上。即使有一个实例出现了故障，需要经过一段时间才能恢复，其他实例也可以对外提供服务，不会影响业务使用</p>","autoDesc":true}');export{e as data};
