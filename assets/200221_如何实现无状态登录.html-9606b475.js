const e=JSON.parse('{"key":"v-5f162655","path":"/blog/2020/200221_%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%97%A0%E7%8A%B6%E6%80%81%E7%99%BB%E5%BD%95.html","title":"如何实现无状态登录","lang":"zh-CN","frontmatter":{"title":"如何实现无状态登录","date":"2020-02-21T14:18:22.000Z","draft":false,"category":["关于技术"],"tag":["login"],"description":"有状态和无状态 什么是有状态 服务器需要记录每次会话的用户信息, 从而识别用户信息, 根据用户身份对请求处理, 例如说tomcat的session 用户登陆后, 服务器将用户信息保存在session中, 然后返回用户一个cookie, cookie中记录了session的id 在用户下次请求时, 我们就可以根据session的id找到对应的用户信息, 这样就实现了用户的登录验证 如果存在很多用户, 那么服务器就需要保存大量session数据, 给服务器带来很大的压力 什么是无状态","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/blog/2020/200221_%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%97%A0%E7%8A%B6%E6%80%81%E7%99%BB%E5%BD%95.html"}],["meta",{"property":"og:title","content":"如何实现无状态登录"}],["meta",{"property":"og:description","content":"有状态和无状态 什么是有状态 服务器需要记录每次会话的用户信息, 从而识别用户信息, 根据用户身份对请求处理, 例如说tomcat的session 用户登陆后, 服务器将用户信息保存在session中, 然后返回用户一个cookie, cookie中记录了session的id 在用户下次请求时, 我们就可以根据session的id找到对应的用户信息, 这样就实现了用户的登录验证 如果存在很多用户, 那么服务器就需要保存大量session数据, 给服务器带来很大的压力 什么是无状态"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T02:58:48.000Z"}],["meta",{"property":"article:author","content":"logycoconut"}],["meta",{"property":"article:tag","content":"login"}],["meta",{"property":"article:published_time","content":"2020-02-21T14:18:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-03T02:58:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何实现无状态登录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-02-21T14:18:22.000Z\\",\\"dateModified\\":\\"2024-06-03T02:58:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://github.com/logycoconut\\"}]}"]]},"headers":[{"level":2,"title":"有状态和无状态","slug":"有状态和无状态","link":"#有状态和无状态","children":[{"level":3,"title":"什么是有状态","slug":"什么是有状态","link":"#什么是有状态","children":[]},{"level":3,"title":"什么是无状态","slug":"什么是无状态","link":"#什么是无状态","children":[]}]},{"level":2,"title":"实现无状态","slug":"实现无状态","link":"#实现无状态","children":[{"level":3,"title":"JWT","slug":"jwt","link":"#jwt","children":[]},{"level":3,"title":"RSA","slug":"rsa","link":"#rsa","children":[]},{"level":3,"title":"结合RSA的鉴权","slug":"结合rsa的鉴权","link":"#结合rsa的鉴权","children":[]},{"level":3,"title":"Java实现","slug":"java实现","link":"#java实现","children":[]}]}],"git":{"createdTime":1717383528000,"updatedTime":1717383528000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":1}]},"readingTime":{"minutes":2.78,"words":835},"filePathRelative":"blog/2020/200221_如何实现无状态登录.md","localizedDate":"2020年2月21日","excerpt":"<h2> 有状态和无状态</h2>\\n<h3> 什么是有状态</h3>\\n<p>服务器需要记录每次会话的用户信息, 从而识别用户信息, 根据用户身份对请求处理, 例如说tomcat的session</p>\\n<p>用户登陆后, 服务器将用户信息保存在session中, 然后返回用户一个cookie, cookie中记录了session的id</p>\\n<p>在用户下次请求时, 我们就可以根据session的id找到对应的用户信息, 这样就实现了用户的登录验证</p>\\n<p>如果存在很多用户, 那么服务器就需要保存大量session数据, 给服务器带来很大的压力</p>\\n<h3> 什么是无状态</h3>","autoDesc":true}');export{e as data};
