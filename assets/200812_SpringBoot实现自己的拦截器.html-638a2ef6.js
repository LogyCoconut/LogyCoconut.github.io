const e=JSON.parse('{"key":"v-0e2ad984","path":"/blog/2020/200812_SpringBoot%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8.html","title":"SpringBoot实现自己的拦截器","lang":"zh-CN","frontmatter":{"title":"SpringBoot实现自己的拦截器","date":"2020-08-12T13:14:02.000Z","draft":false,"category":["关于技术"],"tag":["SpringBoot"],"description":"在 Web 开发中，我们经常需要对请求拦截并做一些动作，比如日志记录、权限检测或者性能检测等 HandlerInterceptor SpringMVC中提供了HandlerInterceptor接口, 我们来大致看一下它的源码 ( 省略参数和异常以方便阅读 ) public interface HandlerInterceptor { // 请求处理之前调用, 当此方法返回true时才执行后续代码, 否则流程中断 default boolean preHandle() { return true; } // 请求处理之后调用 default void postHandle() { } // 请求完成之后调用, 一般用于资源的清理 default void afterCompletion() { } }","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/blog/2020/200812_SpringBoot%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8.html"}],["meta",{"property":"og:title","content":"SpringBoot实现自己的拦截器"}],["meta",{"property":"og:description","content":"在 Web 开发中，我们经常需要对请求拦截并做一些动作，比如日志记录、权限检测或者性能检测等 HandlerInterceptor SpringMVC中提供了HandlerInterceptor接口, 我们来大致看一下它的源码 ( 省略参数和异常以方便阅读 ) public interface HandlerInterceptor { // 请求处理之前调用, 当此方法返回true时才执行后续代码, 否则流程中断 default boolean preHandle() { return true; } // 请求处理之后调用 default void postHandle() { } // 请求完成之后调用, 一般用于资源的清理 default void afterCompletion() { } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T02:58:48.000Z"}],["meta",{"property":"article:author","content":"logycoconut"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2020-08-12T13:14:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-03T02:58:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot实现自己的拦截器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-12T13:14:02.000Z\\",\\"dateModified\\":\\"2024-06-03T02:58:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://github.com/logycoconut\\"}]}"]]},"headers":[{"level":2,"title":"HandlerInterceptor","slug":"handlerinterceptor","link":"#handlerinterceptor","children":[]},{"level":2,"title":"HandlerInterceptorAdapter","slug":"handlerinterceptoradapter","link":"#handlerinterceptoradapter","children":[]},{"level":2,"title":"权限检测场景","slug":"权限检测场景","link":"#权限检测场景","children":[]},{"level":2,"title":"还有最重要的一步","slug":"还有最重要的一步","link":"#还有最重要的一步","children":[]}],"git":{"createdTime":1717383528000,"updatedTime":1717383528000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":1}]},"readingTime":{"minutes":1.56,"words":467},"filePathRelative":"blog/2020/200812_SpringBoot实现自己的拦截器.md","localizedDate":"2020年8月12日","excerpt":"<blockquote>\\n<p>在 Web 开发中，我们经常需要对请求拦截并做一些动作，比如日志记录、权限检测或者性能检测等</p>\\n</blockquote>\\n<h2> HandlerInterceptor</h2>\\n<p>SpringMVC中提供了<code>HandlerInterceptor</code>接口, 我们来大致看一下它的源码 ( <strong>省略参数和异常以方便阅读</strong> )</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>public interface HandlerInterceptor {\\n    // 请求处理之前调用, 当此方法返回true时才执行后续代码, 否则流程中断\\n    default boolean preHandle() { return true; }\\n\\n    // 请求处理之后调用\\n    default void postHandle() { }  \\n    \\n    // 请求完成之后调用, 一般用于资源的清理\\n    default void afterCompletion() { }\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
