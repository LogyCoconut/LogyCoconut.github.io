const e=JSON.parse('{"key":"v-524ccee8","path":"/03_Resource/code/03_database/03_elastic_search/20211020%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html","title":"基础概念","lang":"zh-CN","frontmatter":{"title":"基础概念","date":"2021-10-20T00:00:00.000Z","tag":["ElasticSearch"],"description":"名词解释 集群与节点 集群是一个或多个 Node 的集合，每一个 Node 在启动时都会彼此发现，组成集群 （节点默认会加入一个叫 elasticsearch 的节点） index 和 type index 是一类拥有相似属性的 document 的集合，必须是小写的字符 type 作为 index 中的逻辑类别 （在 ES6 之后的版本逐步放弃type的概念，因为在 ES 中，一个Index下不同的type如果有相同的字段，他们会被luecence当作一个字段，并且他们的定义必须相同，这其实就是一个 Type 了呀） document index 里面的单条的记录，类似于关系型数据库中的行的概念 shards 分片 如果一个 index 存放了过多的数据，响应的速度就会下降 所以 ES 可以将 index 分片，每一片都是一个 shards，分布在不同的节点中 多个主分片加起来才是完整的数据，相当于一桶水用多个杯子装 分片分为主分片和副本分片，主分片数量在索引创建时指定，后续不允许修改，除非 Reindex，多个主分片加起来才是完整的数据 replicas 复制，也可以叫做备份分片 主分片和备分片不会出现在同一个节点上（防止单点故障） 默认情况下一个索引创建 5 个分片一个备份（即 5 primary+5 replica = 10 个分片） replicas 不仅提供备份容灾的作用，也可以提高查询性能","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/03_Resource/code/03_database/03_elastic_search/20211020%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:title","content":"基础概念"}],["meta",{"property":"og:description","content":"名词解释 集群与节点 集群是一个或多个 Node 的集合，每一个 Node 在启动时都会彼此发现，组成集群 （节点默认会加入一个叫 elasticsearch 的节点） index 和 type index 是一类拥有相似属性的 document 的集合，必须是小写的字符 type 作为 index 中的逻辑类别 （在 ES6 之后的版本逐步放弃type的概念，因为在 ES 中，一个Index下不同的type如果有相同的字段，他们会被luecence当作一个字段，并且他们的定义必须相同，这其实就是一个 Type 了呀） document index 里面的单条的记录，类似于关系型数据库中的行的概念 shards 分片 如果一个 index 存放了过多的数据，响应的速度就会下降 所以 ES 可以将 index 分片，每一片都是一个 shards，分布在不同的节点中 多个主分片加起来才是完整的数据，相当于一桶水用多个杯子装 分片分为主分片和副本分片，主分片数量在索引创建时指定，后续不允许修改，除非 Reindex，多个主分片加起来才是完整的数据 replicas 复制，也可以叫做备份分片 主分片和备分片不会出现在同一个节点上（防止单点故障） 默认情况下一个索引创建 5 个分片一个备份（即 5 primary+5 replica = 10 个分片） replicas 不仅提供备份容灾的作用，也可以提高查询性能"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-10T12:09:39.000Z"}],["meta",{"property":"article:author","content":"logycoconut"}],["meta",{"property":"article:tag","content":"ElasticSearch"}],["meta",{"property":"article:published_time","content":"2021-10-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-10T12:09:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础概念\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-10-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-10T12:09:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://github.com/logycoconut\\"}]}"]]},"headers":[{"level":2,"title":"名词解释","slug":"名词解释","link":"#名词解释","children":[]},{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[{"level":3,"title":"创建索引","slug":"创建索引","link":"#创建索引","children":[]},{"level":3,"title":"添加、修改","slug":"添加、修改","link":"#添加、修改","children":[]},{"level":3,"title":"查询","slug":"查询","link":"#查询","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1702210179000,"updatedTime":1702210179000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":1}]},"readingTime":{"minutes":2.64,"words":793},"filePathRelative":"03_Resource/code/03_database/03_elastic_search/20211020 基础概念.md","localizedDate":"2021年10月20日","excerpt":"<h2> 名词解释</h2>\\n<ul>\\n<li>\\n<p>集群与节点</p>\\n<p>集群是一个或多个 Node 的集合，每一个 Node 在启动时都会彼此发现，组成集群<br>\\n（节点默认会加入一个叫 <code>elasticsearch</code> 的节点）</p>\\n</li>\\n<li>\\n<p>index 和 type</p>\\n<p>index 是一类拥有相似属性的 document 的集合，必须是小写的字符<br>\\ntype 作为 index 中的逻辑类别</p>\\n<p>（在 ES6 之后的版本逐步放弃type的概念，因为在 ES 中，一个Index下不同的type如果有相同的字段，他们会被luecence当作一个字段，并且他们的定义必须相同，这其实就是一个 Type 了呀）</p>\\n</li>\\n<li>\\n<p>document</p>\\n<p>index 里面的单条的记录，类似于关系型数据库中的行的概念</p>\\n</li>\\n<li>\\n<p>shards<br>\\n分片</p>\\n<p>如果一个 index 存放了过多的数据，响应的速度就会下降</p>\\n<p><strong>所以 ES 可以将 index 分片，每一片都是一个 shards，分布在不同的节点中</strong></p>\\n<p>多个主分片加起来才是完整的数据，相当于一桶水用多个杯子装</p>\\n<p>分片分为主分片和副本分片，主分片数量在索引创建时指定，后续不允许修改，除非 Reindex，多个主分片加起来才是完整的数据</p>\\n</li>\\n<li>\\n<p>replicas<br>\\n复制，也可以叫做备份分片</p>\\n<p>主分片和备分片不会出现在同一个节点上（防止单点故障）</p>\\n<p>默认情况下一个索引创建 5 个分片一个备份（即 5 primary+5 replica = 10 个分片）</p>\\n<p>replicas 不仅提供备份容灾的作用，也可以提高查询性能</p>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
