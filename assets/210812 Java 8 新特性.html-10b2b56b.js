const a=JSON.parse('{"key":"v-3a32cb5a","path":"/02_program/01_java/210812%20Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7.html","title":"Java 8 新特性","lang":"zh-CN","frontmatter":{"title":"Java 8 新特性","date":"2021-08-12T00:00:00.000Z","tag":["Java"],"description":"Lambda 表达式&nbsp;− 也可称为闭包、Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中） // 语法格式 ( param ) -&gt; expression 或 ( param ) -&gt; { statements; } 方法引用&nbsp;− 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码 默认方法&nbsp;− 默认方法就是一个在接口里面有了一个实现的方法 Stream API&nbsp;−新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中 // 集合元素通过管道的方式处理并得到最终结果 +--------------------+ +------+ +------+ +---+ +-------+ | stream of elements +-----&gt; |filter+-&gt; |sorted+-&gt; |map+-&gt; |collect| +--------------------+ +------+ +------+ +---+ +-------+ // 声明一个List List&lt;Object&gt; list = new ArrayList&lt;&gt;(); // Date Time API&nbsp;− 加强对日期与时间的处理 Optional 类&nbsp;− Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/02_program/01_java/210812%20Java%208%20%E6%96%B0%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:title","content":"Java 8 新特性"}],["meta",{"property":"og:description","content":"Lambda 表达式&nbsp;− 也可称为闭包、Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中） // 语法格式 ( param ) -&gt; expression 或 ( param ) -&gt; { statements; } 方法引用&nbsp;− 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码 默认方法&nbsp;− 默认方法就是一个在接口里面有了一个实现的方法 Stream API&nbsp;−新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中 // 集合元素通过管道的方式处理并得到最终结果 +--------------------+ +------+ +------+ +---+ +-------+ | stream of elements +-----&gt; |filter+-&gt; |sorted+-&gt; |map+-&gt; |collect| +--------------------+ +------+ +------+ +---+ +-------+ // 声明一个List List&lt;Object&gt; list = new ArrayList&lt;&gt;(); // Date Time API&nbsp;− 加强对日期与时间的处理 Optional 类&nbsp;− Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-16T10:57:28.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2021-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-16T10:57:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 新特性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-16T10:57:28.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1676545048000,"updatedTime":1676545048000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":1}]},"readingTime":{"minutes":0.91,"words":274},"filePathRelative":"02_program/01_java/210812 Java 8 新特性.md","localizedDate":"2021年8月12日","excerpt":"<ul>\\n<li>\\n<p><strong>Lambda 表达式</strong>&nbsp;− 也可称为闭包、Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 语法格式 ( param ) -&gt; expression 或 ( param ) -&gt; { statements; }</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>方法引用</strong>&nbsp;− 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码</p>\\n</li>\\n<li>\\n<p><strong>默认方法</strong>&nbsp;− 默认方法就是一个在接口里面有了一个实现的方法</p>\\n</li>\\n<li>\\n<p><strong>Stream API</strong>&nbsp;−新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 集合元素通过管道的方式处理并得到最终结果</span>\\n<span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">+</span>       <span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">+</span>   <span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">+</span>   <span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span><span class=\\"token operator\\">+</span>   <span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span><span class=\\"token operator\\">+</span>\\n<span class=\\"token operator\\">|</span> stream of elements <span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-&gt;</span> <span class=\\"token operator\\">|</span>filter<span class=\\"token operator\\">+</span><span class=\\"token operator\\">-&gt;</span> <span class=\\"token operator\\">|</span>sorted<span class=\\"token operator\\">+</span><span class=\\"token operator\\">-&gt;</span> <span class=\\"token operator\\">|</span>map<span class=\\"token operator\\">+</span><span class=\\"token operator\\">-&gt;</span> <span class=\\"token operator\\">|</span>collect<span class=\\"token operator\\">|</span>\\n<span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">+</span>       <span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">+</span>   <span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">+</span>   <span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span><span class=\\"token operator\\">+</span>   <span class=\\"token operator\\">+</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">--</span><span class=\\"token operator\\">-</span><span class=\\"token operator\\">+</span>\\n\\n<span class=\\"token comment\\">// 声明一个List</span>\\n<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// </span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>Date Time API</strong>&nbsp;− 加强对日期与时间的处理</p>\\n</li>\\n<li>\\n<p><strong>Optional 类</strong>&nbsp;− Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常</p>\\n</li>\\n</ul>","autoDesc":true}');export{a as data};
