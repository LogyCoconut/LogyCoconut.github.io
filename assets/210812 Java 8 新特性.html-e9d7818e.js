import{_ as n,Y as o,Z as p,$ as a,a0 as e,a1 as t,a2 as r,I as l}from"./framework-beff9ad1.js";const c={},k=r(`<ul><li><p><strong>Lambda 表达式</strong> − 也可称为闭包、Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 语法格式 ( param ) -&gt; expression 或 ( param ) -&gt; { statements; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>方法引用</strong> − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码</p></li><li><p><strong>默认方法</strong> − 默认方法就是一个在接口里面有了一个实现的方法</p></li><li><p><strong>Stream API</strong> −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 集合元素通过管道的方式处理并得到最终结果</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>       <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span> stream of elements <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token operator">|</span>filter<span class="token operator">+</span><span class="token operator">-&gt;</span> <span class="token operator">|</span>sorted<span class="token operator">+</span><span class="token operator">-&gt;</span> <span class="token operator">|</span>map<span class="token operator">+</span><span class="token operator">-&gt;</span> <span class="token operator">|</span>collect<span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>       <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>   <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>

<span class="token comment">// 声明一个List</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Date Time API</strong> − 加强对日期与时间的处理</p></li><li><p><strong>Optional 类</strong> − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,2),i={href:"https://www.runoob.com/java/java8-new-features.html",target:"_blank",rel:"noopener noreferrer"};function d(m,u){const s=l("ExternalLinkIcon");return o(),p("div",null,[k,a("p",null,[a("a",i,[e("菜鸟教程 - Java8新特性"),t(s)])])])}const g=n(c,[["render",d],["__file","210812 Java 8 新特性.html.vue"]]);export{g as default};
