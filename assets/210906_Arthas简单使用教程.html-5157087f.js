const t=JSON.parse('{"key":"v-6b1cb9f6","path":"/02_program/09_tools/210906_Arthas%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html","title":"Arthas简单使用教程","lang":"zh-CN","frontmatter":{"title":"Arthas简单使用教程","date":"2021-09-06T00:00:00.000Z","tag":["Arthas"],"description":"Java 应用诊断利器 使用场景 我们都知道，&nbsp;JVM 提供了 远程调试（Remote Debug） 的功能， IDEA 也很好地支持了这一特性 但是，在中小型公司中，测试环境往往只有一台机器（或容器） 那么，在多个需求并行开发测试的时候，功能将会合并到同一测试分支，然后进行应用部署 这时候，如果再使用远程 Debug 的方式来排查错误，会导致整个测试环境的线程都挂起，影响别人的测试 所以我们可以通过 打 log 日志+ 重新部署的方式排查问题","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/02_program/09_tools/210906_Arthas%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html"}],["meta",{"property":"og:title","content":"Arthas简单使用教程"}],["meta",{"property":"og:description","content":"Java 应用诊断利器 使用场景 我们都知道，&nbsp;JVM 提供了 远程调试（Remote Debug） 的功能， IDEA 也很好地支持了这一特性 但是，在中小型公司中，测试环境往往只有一台机器（或容器） 那么，在多个需求并行开发测试的时候，功能将会合并到同一测试分支，然后进行应用部署 这时候，如果再使用远程 Debug 的方式来排查错误，会导致整个测试环境的线程都挂起，影响别人的测试 所以我们可以通过 打 log 日志+ 重新部署的方式排查问题"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-16T10:57:28.000Z"}],["meta",{"property":"article:author","content":"logycoconut"}],["meta",{"property":"article:tag","content":"Arthas"}],["meta",{"property":"article:published_time","content":"2021-09-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-16T10:57:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Arthas简单使用教程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-16T10:57:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://github.com/logycoconut\\"}]}"]]},"headers":[{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[{"level":3,"title":"watch 观察函数","slug":"watch-观察函数","link":"#watch-观察函数","children":[]},{"level":3,"title":"tt 时空隧道","slug":"tt-时空隧道","link":"#tt-时空隧道","children":[]},{"level":3,"title":"cls 命令行清空","slug":"cls-命令行清空","link":"#cls-命令行清空","children":[]},{"level":3,"title":"jad 反编译代码","slug":"jad-反编译代码","link":"#jad-反编译代码","children":[]},{"level":3,"title":"热部署代码","slug":"热部署代码","link":"#热部署代码","children":[]}]},{"level":2,"title":"IDEA 插件","slug":"idea-插件","link":"#idea-插件","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1676545048000,"updatedTime":1676545048000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":1}]},"readingTime":{"minutes":2.51,"words":753},"filePathRelative":"02_program/09_tools/210906_Arthas简单使用教程.md","localizedDate":"2021年9月6日","excerpt":"<blockquote>\\n<p>Java 应用诊断利器</p>\\n</blockquote>\\n<h2> 使用场景</h2>\\n<p>我们都知道，&nbsp;JVM 提供了 <strong>远程调试（Remote Debug）</strong> 的功能， IDEA 也很好地支持了这一特性</p>\\n<p>但是，在中小型公司中，测试环境往往只有一台机器（或容器）</p>\\n<p>那么，在多个需求并行开发测试的时候，功能将会合并到同一测试分支，然后进行应用部署</p>\\n<p>这时候，如果再使用远程 Debug 的方式来排查错误，会导致整个测试环境的线程都挂起，影响别人的测试</p>\\n<p>所以我们可以通过 <s>打 log 日志+ 重新部署的方式排查问题</s></p>","autoDesc":true}');export{t as data};
