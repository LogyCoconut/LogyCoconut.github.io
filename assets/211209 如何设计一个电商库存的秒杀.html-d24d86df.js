import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as n,a as e,b as o,d as t,f as s}from"./app-5e910552.js";const d={},h=s('<h2 id="秒杀应该考虑哪些问题" tabindex="-1"><a class="header-anchor" href="#秒杀应该考虑哪些问题" aria-hidden="true">#</a> 秒杀应该考虑哪些问题</h2><ol><li><strong>超卖问题（首要）</strong></li><li><strong>高高并发</strong></li></ol><p>秒杀具有时间短、并发量大的特点，短时间会有大量请求涌向后端</p><p>需要考虑并发过高造成缓存击穿或者失效、击垮数据库</p><ol><li>接口防刷</li><li>秒杀Url</li><li>大量请求问题</li></ol><h2 id="系统设计与方案" tabindex="-1"><a class="header-anchor" href="#系统设计与方案" aria-hidden="true">#</a> 系统设计与方案</h2><h3 id="前端" tabindex="-1"><a class="header-anchor" href="#前端" aria-hidden="true">#</a> 前端</h3><ol><li>秒杀Url的设计</li></ol><p>前端首先访问后端获取具体的秒杀Url，后台校验之后才可以继续秒杀</p><ol><li>秒杀页面静态化，扛住流量</li><li>秒杀按钮截流，禁止重复点击</li><li>设置概率，直接拒绝一部分的用户请求</li></ol><h3 id="后端" tabindex="-1"><a class="header-anchor" href="#后端" aria-hidden="true">#</a> 后端</h3><ol><li>使用nginx分发请求到集群中</li><li>部署redis集群，采用哨兵模式</li><li>库存在一开始就在Redis中设值，库存的增删都在Redis中操作</li><li>接口限流（网关、令牌桶、Redis setNx判断是否重复下单）</li><li>异步下单</li></ol><p>使用队列（本地队列、消息队列）削峰，在请求经过限流、库存等的校验之后，就可以认为是一个有效请求，就可以发送到队列进行下单操作，最终入库</p><h3 id="bilibili评论区" tabindex="-1"><a class="header-anchor" href="#bilibili评论区" aria-hidden="true">#</a> <strong>Bilibili评论区</strong></h3><p>CDN边缘计算扛前端静态页面流量，设定概率，一部分用户请求直接被前端js脚本拒绝，不发请求直接显示秒杀结束。</p><p>lvs keepalive nginx集群负载均衡流量到网关集群，网关鉴权，令牌桶限流，流量一致性哈希进入redis多副本分片集群，库存拆分给redis各个节点去抢，decr命令或lua脚本原子性扣减库存，抢了之后发送消息到RocketMQ集群，返回提示订单创建中，消费者集群异步写入订单到PolarDB集群，消费成功后告知用户成功</p><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h3>',17),c={href:"https://mp.weixin.qq.com/s/aMr5CrR-_57SN1M6UNVBUQ",target:"_blank",rel:"noopener noreferrer"};function _(p,f){const i=r("ExternalLinkIcon");return l(),n("div",null,[h,e("p",null,[e("a",c,[o("面试官：如何设计出骚气的秒杀系统？"),t(i)])])])}const u=a(d,[["render",_],["__file","211209 如何设计一个电商库存的秒杀.html.vue"]]);export{u as default};
