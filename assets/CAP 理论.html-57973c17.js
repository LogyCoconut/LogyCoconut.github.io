import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as r,c as o,a as e,b as a,d as s,f as l}from"./app-0505bdf9.js";const d={},c={href:"https://www.bilibili.com/video/BV1YM41197XX",target:"_blank",rel:"noopener noreferrer"},p=l(`<p>分布式计算领域的公认定理</p><ul><li><p>C：Consistency</p></li><li><p>A： Availability</p></li><li><p>P： Partition Tolerance</p></li></ul><h4 id="分区容错性-partition-tolerance" tabindex="-1"><a class="header-anchor" href="#分区容错性-partition-tolerance" aria-hidden="true">#</a> 分区容错性 Partition Tolerance</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;the system continues to operate despite arbitrary message loss or failure of part of the system&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个节点挂掉不影响另一个节点对外提供服务</p><p>也就是说<strong>分区容错性是分布式系统具备的基本能力</strong></p><h4 id="一致性-consistency" tabindex="-1"><a class="header-anchor" href="#一致性-consistency" aria-hidden="true">#</a> 一致性 Consistency</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;all nodes see the same data at the same time&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦数据更新完成并成功返回客户端，那么所有节点在同一时间的数据完全一致</p><figure><img src="https://cdn.jsdelivr.net/gh/logycoconut/pic-repo/20231218142920.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>*为了实现 C 并不是因为锁阻塞，而是因为等待从节点返回的 <code>ack</code> 阻塞<br> 即使是单机架构多线程写的时候也要加锁，但是不用等待 <code>ack</code> 所以可以同时实现 CA</p><p><strong>存在的问题</strong></p><ol><li>由于存在数据同步的过程，写操作的响应会有一定的延迟（因为没有得到 <code>ACK</code> 响应）</li><li>为了保证数据一致性会对资源暂时锁定，带数据同步完成释放锁定资源，此时有请求对该数据的操作会阻塞</li></ol><h4 id="可用性-availability" tabindex="-1"><a class="header-anchor" href="#可用性-availability" aria-hidden="true">#</a> 可用性 Availability</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;Reads and writes always succeed&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有请求都有响应，且不会出现响应超时或响应错误</p><h3 id="为什么不能同时满足" tabindex="-1"><a class="header-anchor" href="#为什么不能同时满足" aria-hidden="true">#</a> 为什么不能同时满足 ？</h3><p>因为存在分区间的网络或者其他问题，C 和 A 不能同时满足，除非不采用集群</p><ul><li><p>如果想满足 C（Consistency）<br> 假设现在成功往 A 节点写入数据，但是两节点间通信出现问题，最新数据同步不到 B 节点，那么为了满足一致性，其他往 B 节点发起的请求就不能得到响应，此时满足不了<strong>可用性</strong></p></li><li><p>如果想满足 A（Availability）<br> 假设现在成功往 A 节点写入数据，但是两节点间通信出现问题，最新数据同步不到 B 节点，那么为了满足可用性，其他往 B 节点发起的请求就会立即得到响应，返回未更新的旧数据，此时满足不了<strong>一致性</strong></p></li></ul>`,19);function u(h,g){const i=n("ExternalLinkIcon");return r(),o("div",null,[e("blockquote",null,[e("p",null,[a("【面试官：什么是 CAP 理论？为什么C.A.P 不能同时有？】 "),e("a",c,[a("https://www.bilibili.com/video/BV1YM41197XX"),s(i)])])]),p])}const v=t(d,[["render",u],["__file","CAP 理论.html.vue"]]);export{v as default};
