import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as n,b as s,d as c,f as l}from"./app-c91d02ba.js";const i={},u={href:"https://juejin.cn/post/6844903639308304397",target:"_blank",rel:"noopener noreferrer"},r=l(`<p>Java 源代码变成计算机可执行的机器指令的过程中, 会经过两段编译</p><ol><li>将 .java 文件转化成 .class 文件</li><li>.class 文件转换成机器指令</li></ol><p>在新版 JDK 中, Java 代码的编译引入了 JIT 技术</p><p>当 JVM 发现某个方法、代码块运行特别频繁时, 会认定这是 &quot;热点代码&quot;, JIT 就会将这部分代码翻译成机器码, 并进行优化, 然后再把翻译后的机器码缓存起来, 以备下次使用</p><h3 id="逃逸分析" tabindex="-1"><a class="header-anchor" href="#逃逸分析" aria-hidden="true">#</a> 逃逸分析</h3><p>编译器可以做如下优化</p><ul><li><p>同步省略</p><p>如果一个对象被发现只能从一个线程被访问到, 那么对于这个对象的操作可以不考虑同步</p></li><li><p>将堆分配转化为栈分配</p><p>如果一个对象在方法中被分配, 不会逃逸出方法, 那么就可能被优化成栈上分配</p></li><li><p>分离对象 / 标量替换</p><blockquote><p>标量: 指一个无法再分解成更小的数据的数据<br> 可以将 Java 对象理解成一个聚合量</p></blockquote><p>如果对象不会逃逸, JIT 就不会创建对象, 而是直接使用标量</p><p>例如</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// before</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span>（<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>）<span class="token punctuation">;</span> 
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;point.x=&quot;</span><span class="token operator">+</span>point<span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token string">&quot;; point.y=&quot;</span><span class="token operator">+</span>point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token comment">// after</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;point.x=&quot;</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">&quot;; point.y=&quot;</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function k(d,v){const a=p("ExternalLinkIcon");return e(),o("div",null,[n("blockquote",null,[n("p",null,[s("请看原文: "),n("a",u,[s("深入理解Java中的逃逸分析"),c(a)])])]),r])}const _=t(i,[["render",k],["__file","Java 的逃逸分析.html.vue"]]);export{_ as default};
