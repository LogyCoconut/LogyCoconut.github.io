const e=JSON.parse('{"key":"v-f051d6fe","path":"/02_program/01_java/Java%E5%9F%BA%E7%A1%80.html","title":"Java基础","lang":"zh-CN","frontmatter":{"title":"Java基础","order":1,"description":"Java面向对象编程三大特性（封装、继承、多态） 封装：把一个对象的属性私有化，同时提供能访问这些属性的方法 继承：继承是使用已存在的类的定义作为基础建立新类，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但是不能选择性的继承父类 多态：指的是程序中定义的引用变量所指向的具体类型以及该引用对象发出的方法调用并不确定，而是在程序运行期间才确定 （Java中有两种形式可以实现多态：继承、接口实现） String为什么是不可变的？String、StringBuffer和StringBuilder的区别是什么？","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/02_program/01_java/Java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"Java面向对象编程三大特性（封装、继承、多态） 封装：把一个对象的属性私有化，同时提供能访问这些属性的方法 继承：继承是使用已存在的类的定义作为基础建立新类，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但是不能选择性的继承父类 多态：指的是程序中定义的引用变量所指向的具体类型以及该引用对象发出的方法调用并不确定，而是在程序运行期间才确定 （Java中有两种形式可以实现多态：继承、接口实现） String为什么是不可变的？String、StringBuffer和StringBuilder的区别是什么？"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-28T14:22:03.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-28T14:22:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-28T14:22:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Java面向对象编程三大特性（封装、继承、多态）","slug":"java面向对象编程三大特性-封装、继承、多态","link":"#java面向对象编程三大特性-封装、继承、多态","children":[]},{"level":2,"title":"String为什么是不可变的？String、StringBuffer和StringBuilder的区别是什么？","slug":"string为什么是不可变的-string、stringbuffer和stringbuilder的区别是什么","link":"#string为什么是不可变的-string、stringbuffer和stringbuilder的区别是什么","children":[]},{"level":2,"title":"自动装箱于拆箱","slug":"自动装箱于拆箱","link":"#自动装箱于拆箱","children":[]},{"level":2,"title":"在一个静态方法内调用一个非静态成员为什么是非法的","slug":"在一个静态方法内调用一个非静态成员为什么是非法的","link":"#在一个静态方法内调用一个非静态成员为什么是非法的","children":[]},{"level":2,"title":"== 与 equals（重要）","slug":"与-equals-重要","link":"#与-equals-重要","children":[]},{"level":2,"title":"hashCode和equals（重要）","slug":"hashcode和equals-重要","link":"#hashcode和equals-重要","children":[]},{"level":2,"title":"BIO、NIO、AIO有什么区别？","slug":"bio、nio、aio有什么区别","link":"#bio、nio、aio有什么区别","children":[{"level":3,"title":"Java中的IO原理","slug":"java中的io原理","link":"#java中的io原理","children":[]},{"level":3,"title":"同步和异步","slug":"同步和异步","link":"#同步和异步","children":[]},{"level":3,"title":"阻塞与非阻塞","slug":"阻塞与非阻塞","link":"#阻塞与非阻塞","children":[]},{"level":3,"title":"举个例子","slug":"举个例子","link":"#举个例子","children":[]}]}],"git":{"createdTime":1672237323000,"updatedTime":1672237323000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":1}]},"readingTime":{"minutes":7.47,"words":2242},"filePathRelative":"02_program/01_java/Java基础.md","localizedDate":"2022年12月28日","excerpt":"<h2> Java面向对象编程三大特性（封装、继承、多态）</h2>\\n<ul>\\n<li>封装：把一个对象的属性私有化，同时提供能访问这些属性的方法</li>\\n<li>继承：继承是使用已存在的类的定义作为基础建立新类，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但是不能选择性的继承父类</li>\\n<li>多态：指的是程序中定义的引用变量所指向的具体类型以及该引用对象发出的方法调用并不确定，而是在程序运行期间才确定</li>\\n</ul>\\n<p>（Java中有两种形式可以实现多态：继承、接口实现）</p>\\n<h2> String为什么是不可变的？String、StringBuffer和StringBuilder的区别是什么？</h2>","autoDesc":true}');export{e as data};
