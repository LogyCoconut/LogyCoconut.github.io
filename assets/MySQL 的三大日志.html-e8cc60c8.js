import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as i,a as e,b as o,d as n,e as a}from"./app-28676176.js";const g={},t={href:"https://segmentfault.com/a/1190000023827696",target:"_blank",rel:"noopener noreferrer"},b=e("br",null,null,-1),s=a('<p><code>MySQL</code> 中存在各种日志（错误日志、查询日志、慢查询日志、事务日志、二进制日志等）<br> 本文重点关注 <code>bin log</code>, <code>redo log</code>, <code>undo log</code> 这三大常用日志</p><h2 id="bin-log-二进制日志" tabindex="-1"><a class="header-anchor" href="#bin-log-二进制日志" aria-hidden="true">#</a> bin log 二进制日志</h2><p>用于记录数据库执行的写入性操作（不包括查询信息 <code>select</code>），以二进制的形式保存在磁盘中</p><p><code>bin log</code> 是 <code>MySQL</code> 的逻辑日志，并且由 <code>Server</code> 层进行记录，使用任何存储引擎的 <code>MySQL</code> 数据库都会记录 <code>bin log</code> 日志</p><p><em>逻辑日志可以简单地理解为记录的就是 SQL 语句，而物理日志则具体的数据页变更</em></p><p><code>bin log</code> 通过追加的方式进行写入，可以通过参数设置每一个 <code>bin log</code> 文件的大小，当文件大小超过给定值之后，会生成新的文件来保存日志</p><h3 id="bin-log-使用场景" tabindex="-1"><a class="header-anchor" href="#bin-log-使用场景" aria-hidden="true">#</a> bin log 使用场景</h3><ul><li><strong>主从复制</strong>：从 <code>Master</code> 端开启 <code>bin log</code>，然后将 <code>bin log</code> 发送到各个 <code>Slave</code> 端，<code>Slave</code> 重放 <code>bin log</code> 从而达到主从数据一致</li><li><strong>数据恢复</strong>：通过 <code>mysqlbinlog</code> 工具来恢复数据</li><li><strong>业务监控</strong>：通过监控 <code>bin log</code> 的变更来达到业务上的一些需求，比如说实时更新缓存值</li></ul><h3 id="bin-log-刷盘时机" tabindex="-1"><a class="header-anchor" href="#bin-log-刷盘时机" aria-hidden="true">#</a> bin log 刷盘时机</h3><p>对于 <code>InnoDB</code> 引擎来说，只有事务提交时才会记录 <code>bin log</code>，此时记录还在内存中</p><p><code>MySQL</code> 通过 <code>sync_binlog</code> 参数控制 <code>bin log</code> 的刷盘时机<br><code>sync_binlog</code> 参数的取值范围为 <code>0 ~ N</code></p><ul><li>0: 不强制要求，由系统判断何时写入磁盘</li><li>1: 每次 <code>commit</code> 的时候都要将 <code>bin log</code> 写入磁盘</li><li>N: 每 N 次事务才会将 <code>bin log</code> 写入磁盘</li></ul><p><em><code>sync_binlog</code> 最安全的设置是 1，而显而易见，N 越大数据库性能越高，可以酌情牺牲一定的一致性来获取更好的性能</em></p><h3 id="bin-log-日志格式" tabindex="-1"><a class="header-anchor" href="#bin-log-日志格式" aria-hidden="true">#</a> bin log 日志格式</h3><p><code>bin log</code> 有三中日志格式，分别为 <code>STATEMENT</code>、<code>ROW</code> 以及 <code>MIXED</code></p><ul><li><p><code>STATEMENT</code><br> 基于 <code>SQL</code> 语句的复制（<code>statement-based replication</code>，<code>SBR</code>），每一条会修改数据的 <code>SQL</code> 语句会记录到 <code>bin log</code> 中</p><ul><li>优点：不需要记录每一行的变化，可以有效减少 <code>bin log</code> 的日志量，节省 <code>IO</code></li><li>缺点：某些情况下会导致主从数据不一致，比如执行 <code>sysdate ()</code>、 <code>sleep ()</code> 等</li></ul></li><li><p><code>ROW</code><br> 基于行的复制 （<code>row-based replication</code>，<code>RBR</code>），仅记录哪条数据修改了，不记录每条 <code>SQL</code> 的上下文信息</p><ul><li>优点：针对存储过程、<code>function</code>、<code>trigger</code> 的调用和触发也能被正确复制</li><li>缺点：特定条件下会产生大量的日志，尤其是 <code>alter table</code> 时会让日志暴涨</li></ul></li><li><p><code>MIXED</code><br> 基于 <code>STATMENT</code> 和 <code>ROW</code> 两种模式的混合复制（<code>mix-based replication</code>，<code>MBR</code>）<br> 一般的复制使用 <code>STATEMENT</code> 模式保存 <code>bin log</code>，对于 <code>STATEMENT</code> 模式无法复制的操作使用 ROW <code>模式来保存</code> <code>bin log\b</code></p></li></ul><h2 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log" aria-hidden="true">#</a> redo log</h2><h3 id="为什么需要-redo-log" tabindex="-1"><a class="header-anchor" href="#为什么需要-redo-log" aria-hidden="true">#</a> 为什么需要 redo log</h3><p>事务四大特性之一的<strong>持久性</strong>，只要事务提交成功，那么对数据库做的修改就被永久保存下来了，不可能因为任何原因再回到原来的状态</p><p>那么，<code>MySQL</code> 是如何保证一致性的呢<br> 最简单的办法就是每次事务提交的时候，就将该事务涉及修改的数据页全部刷新到磁盘中</p><p>但是，显然这存在严重的性能问题</p><ul><li><code>InnoDB</code> 是以页为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，就太浪费资源了</li><li>一个事务可能涉及多个数据页，并且这些数据页在物理上并不连续，使用<strong>随机 <code>IO</code></strong> 写入性能太差</li></ul><h3 id="redo-log-基本概念" tabindex="-1"><a class="header-anchor" href="#redo-log-基本概念" aria-hidden="true">#</a> redo log 基本概念</h3><p><code>redo log</code> 包含两部分</p><ul><li>内存中的日志缓冲 <code>redo log buffer</code></li><li>磁盘上的日志文件 <code>redo log file</code></li></ul><p>MySQL 每执行一条 DML 语句，先将记录写入到 redo log buffer，后续某个时间点在一次性将多个操作记录写到 redo log file<br><em>这种技术也就是 WAL (Write-Ahead Logging)</em></p><p>在计算机操作系统中，用户空间下的缓冲区数据一般情况下是无法直接写入磁盘的<br> 中间必须经过操作系统的内核空间缓冲区（<code>OS Buffer</code>）<br> 因此，<code>redo log buffer</code> 写入到 <code>redo log file </code> 的过程实际上是先写入 <code> OS buffer</code>，然后再通过系统调用 <code>fsync() </code> 将其刷到 <code> redo log file</code></p><p><code>MySQL</code> 支持三种将 r<code>edo log buffer</code> 写入到 <code>redo log file</code> 的时机，通过 <code>innodb_flush_log_at_trx_comit</code> 参数</p><ul><li><p><code>0</code>：延迟写<br> 事务提交时不会将 <code>redo log buffer</code> 中日志写入到 <code>os buffer</code> ，而是每秒写入 <code>os buffer</code> 并调用 <code>fsync()</code> 写入到 <code>redo log file</code> 中<br> 也就是说设置为0时是(大约)每秒刷新写入到磁盘中的，当系统崩溃，会丢失1秒钟的数据</p></li><li><p><code>1</code>：实时写，实时刷<br> 事务每次提交都会将 <code>redo log buffer</code> 中的日志写入 <code>os buffer</code> 并调用 <code>fsync()</code> 刷到 <code>redo log file</code> 中<br> 这种方式即使系统崩溃也不会丢失任何数据，但是因为每次提交都写入磁盘，IO 的性能较差</p></li><li><p><code>2</code>：实时写，延迟刷<br> 每次提交都仅写入到 <code>os buffer</code> ，然后是每秒调用 <code>fsync()</code> 将 <code>os buffer</code> 中的日志写入到 <code>redo log file</code></p></li></ul><h3 id="redo-log-记录形式" tabindex="-1"><a class="header-anchor" href="#redo-log-记录形式" aria-hidden="true">#</a> redo log 记录形式</h3><p>记录事务对数据页做了哪些修改</p><h2 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log" aria-hidden="true">#</a> undo log</h2><p>记录了数据的逻辑变化</p><p>保证原子性</p><p>MVCC</p>',35);function p(h,f){const d=l("ExternalLinkIcon");return r(),i("div",null,[e("blockquote",null,[e("ul",null,[e("li",null,[e("a",t,[o("必须了解的mysql三大日志-binlog、redo log和undo log"),n(d)]),b,o(" 文章写的太好了，值得反复观看")])])]),s])}const m=c(g,[["render",p],["__file","MySQL 的三大日志.html.vue"]]);export{m as default};
