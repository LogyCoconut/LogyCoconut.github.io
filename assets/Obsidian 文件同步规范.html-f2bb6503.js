const t=JSON.parse('{"key":"v-19464204","path":"/02_Area/Lifestyle/Obsidian%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Obsidian%20%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html","title":"Obsidian 文件同步规范","lang":"zh-CN","frontmatter":{"title":"Obsidian 文件同步规范","date":"2024-12-06T00:00:00.000Z","tag":["Obsidian"],"description":"Obsidian 文件同步规范 这篇文章的初衷非常简单 在长时间的 Obsidian 使用过程中（或者说知识库构建过程中），Git 在其中只是扮演了文件同步的角色 但是 Git 本身是一个非常优秀的版本控制工具 那么，是否需要以一种规范的方式来管理我的文档？就像管理代码一样？ 答案是肯定的，规范使用 Git 能够让提交记录更清晰，清楚地看到每一次提交做出的改变 这里可以参考一份 Git 规范，AngularJS Git Commit Message Conventions Angular 规范 将一次 Commit 信息分为 Header、Body、Footer 三部分 对于文档管理来说，只使用 Header 部分就足以表明本次改动的内容了","head":[["meta",{"property":"og:url","content":"https://logycoconut.github.io/02_Area/Lifestyle/Obsidian%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/Obsidian%20%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:title","content":"Obsidian 文件同步规范"}],["meta",{"property":"og:description","content":"Obsidian 文件同步规范 这篇文章的初衷非常简单 在长时间的 Obsidian 使用过程中（或者说知识库构建过程中），Git 在其中只是扮演了文件同步的角色 但是 Git 本身是一个非常优秀的版本控制工具 那么，是否需要以一种规范的方式来管理我的文档？就像管理代码一样？ 答案是肯定的，规范使用 Git 能够让提交记录更清晰，清楚地看到每一次提交做出的改变 这里可以参考一份 Git 规范，AngularJS Git Commit Message Conventions Angular 规范 将一次 Commit 信息分为 Header、Body、Footer 三部分 对于文档管理来说，只使用 Header 部分就足以表明本次改动的内容了"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-06T11:29:57.000Z"}],["meta",{"property":"article:author","content":"logycoconut"}],["meta",{"property":"article:tag","content":"Obsidian"}],["meta",{"property":"article:published_time","content":"2024-12-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-06T11:29:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Obsidian 文件同步规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-06T11:29:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"logycoconut\\",\\"url\\":\\"https://github.com/logycoconut\\"}]}"]]},"headers":[],"git":{"createdTime":1733484597000,"updatedTime":1733484597000,"contributors":[{"name":"logycoconut","email":"logycoconut@foxmail.com","commits":1}]},"readingTime":{"minutes":1.11,"words":332},"filePathRelative":"02_Area/Lifestyle/Obsidian 使用指南/Obsidian 文件同步规范.md","localizedDate":"2024年12月6日","excerpt":"<h1> Obsidian 文件同步规范</h1>\\n<p>这篇文章的初衷非常简单<br>\\n在长时间的 Obsidian 使用过程中（或者说知识库构建过程中），Git 在其中只是扮演了文件同步的角色<br>\\n但是 Git 本身是一个非常优秀的版本控制工具<br>\\n那么，是否需要以一种规范的方式来管理我的文档？就像管理代码一样？</p>\\n<p>答案是肯定的，规范使用 Git 能够让提交记录更清晰，清楚地看到每一次提交做出的改变</p>\\n<p>这里可以参考一份 Git 规范，<em><strong><a href=\\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">AngularJS Git Commit Message Conventions</a></strong></em><br>\\n<em><strong>Angular 规范</strong></em> 将一次 Commit 信息分为 Header、Body、Footer 三部分<br>\\n对于文档管理来说，只使用 Header 部分就足以表明本次改动的内容了</p>","autoDesc":true}');export{t as data};
