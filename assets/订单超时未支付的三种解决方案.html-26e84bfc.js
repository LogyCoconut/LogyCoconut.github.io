import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,f as _}from"./app-272f7ca8.js";const r={},c=_('<blockquote><p>用户下单之后未支付，需要实现超时自动取消订单</p></blockquote><h3 id="懒删除" tabindex="-1"><a class="header-anchor" href="#懒删除" aria-hidden="true">#</a> 懒删除</h3><p>不用自动更新订单状态，而是在再一次查询订单状态时发现订单超时，这时候才去更新订单状态为「已超时」</p><h3 id="扫表轮训" tabindex="-1"><a class="header-anchor" href="#扫表轮训" aria-hidden="true">#</a> 扫表轮训</h3><p>较为常用的一种方案</p><p>如果对于实时性要求不高的话可以采用这种方案</p><p>通过一个定时任务，例如间隔 5 秒查询最近 30 分钟创建的订单，如果发现「未支付」的订单，则更新为「已超时」</p><h3 id="延迟队列" tabindex="-1"><a class="header-anchor" href="#延迟队列" aria-hidden="true">#</a> 延迟队列</h3><ul><li>像 RocketMQ 之类的消息队列都提供了延迟队列的能力，可以在用户下单的同时发送一个「用户订单超时确认」的消息，在指定时间后消费，例如 10 秒，同时消费端做好业务处理</li><li>如果系统的 MQ 版本过老，可能没有延迟消费的能力，可以自己简单实现一个延迟服务，通过时间轮的方式</li></ul>',9),o=[c];function i(h,d){return a(),t("div",null,o)}const s=e(r,[["render",i],["__file","订单超时未支付的三种解决方案.html.vue"]]);export{s as default};
